const express = require('express');
const db = require('../config/database');
const { auth, apenasCidadao, apenasOperacional } = require('../middleware/auth');
const { GoogleGenerativeAI } = require('@google/generative-ai'); // SDK Gemini
const multer = require('multer');
const path = require('path');
const fs = require('fs');

const router = express.Router();

// Configura√ß√£o do multer para upload de imagens
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, path.join(__dirname, '../uploads'));
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, uniqueSuffix + '-' + file.originalname);
  }
});
const upload = multer({ storage: storage });

// Listar alertas
router.get('/', auth, async (req, res) => {
  try {
    let query;
    let params = [];
    const requestedStatus = req.query.status;
    
    console.log('üë§ Usu√°rio solicitando alertas:', {
      id: req.user.userId,
      tipo: req.user.tipo,
      status: requestedStatus
    });
    
    let baseQuery = `
      SELECT a.*, 
             u.nome_completo as user_nome,
             u.bilhete_identidade as user_bi,
             u.telefone as user_telefone,
             u.contacto_familiar as contacto_familiar,
             u.municipio as user_municipio,
             u.bairro as user_bairro,
             up.nome as unidade_atribuida_nome
      FROM alertas a
      JOIN usuarios u ON a.usuario_id = u.id
      LEFT JOIN unidades_policiais up ON a.unidade_atribuida_id = up.id
    `;
    let whereClause = `WHERE 1=1`;

    if (req.user.tipo === 'cidadao') {
      // Cidad√£o v√™ apenas seus pr√≥prios alertas
      whereClause += ` AND a.usuario_id = $${params.length + 1}`;
      params.push(req.user.userId);
    }

    // Filtrar por status, se especificado. Caso contr√°rio, filtrar por 'novo' ou 'em_progresso'
    if (requestedStatus && requestedStatus !== 'all') {
      whereClause += ` AND a.status = $${params.length + 1}`;
      params.push(requestedStatus);
    } else if (!requestedStatus) {
      // Padr√£o: apenas alertas 'novo' ou 'em_progresso'
      whereClause += ` AND a.status IN ($${params.length + 1}, $${params.length + 2})`;
      params.push('novo', 'em_progresso');
    }
    
    query = `
      ${baseQuery}
      ${whereClause}
      ORDER BY a.created_at DESC
      LIMIT 100
    `;
    
    console.log('üîç Query de busca:', { query, params });
    
    const result = await db.query(query, params);
    console.log('üìä Alertas encontrados:', result.rows);
    
    res.json(result.rows);
    
  } catch (error) {
    console.error('‚ùå Erro ao buscar alertas:', error);
    res.status(500).json({ error: 'Erro ao buscar alertas' });
  }
});

// Criar novo alerta
router.post('/', auth, async (req, res) => {
  try {
    console.log('üìù CORPO DA REQUISI√á√ÉO RECEBIDA:', req.body);
    console.log('üë§ USU√ÅRIO AUTENTICADO:', req.user);
    console.log('üìä HEADERS:', req.headers['content-type'], req.headers['authorization'] ? 'Token presente' : 'Token ausente');
    
    const { latitude, longitude } = req.body;
    
    console.log('üìä DADOS EXTRA√çDOS:', { latitude, longitude });
    
    if (!latitude || !longitude) {
      console.log('‚ùå COORDENADAS FALTANDO:', { 
        latitude: latitude || 'FALTANDO', 
        longitude: longitude || 'FALTANDO' 
      });
      return res.status(400).json({ 
        error: 'Latitude e longitude s√£o obrigat√≥rios',
        received: { latitude, longitude }
      });
    }
    
    // Validar coordenadas de Luanda
    const latMin = -9.0, latMax = -8.5, lngMin = 13.0, lngMax = 13.5;
    console.log('üåç VALIDANDO COORDENADAS:', { latitude, longitude });
    console.log('üåç LIMITES LUANDA:', { latMin, latMax, lngMin, lngMax });
    
    if (latitude < latMin || latitude > latMax || longitude < lngMin || longitude > lngMax) {
      console.log('‚ùå COORDENADAS FORA DA √ÅREA DE COBERTURA');
      return res.status(400).json({ 
        error: 'Localiza√ß√£o fora da √°rea de cobertura (Luanda)',
        received: { latitude, longitude },
        limits: { latMin, latMax, lngMin, lngMax }
      });
    }
    
    console.log('‚úÖ COORDENADAS V√ÅLIDAS - DENTRO DE LUANDA');
    
    // 1. Buscar todos os policiais ativos com localiza√ß√£o recente
    const policiaisQuery = `
      SELECT id, nome_completo, localizacao_lat, localizacao_lng
      FROM usuarios
      WHERE tipo_usuario = 'policia' AND ativo = true
        AND localizacao_lat IS NOT NULL AND localizacao_lng IS NOT NULL
        AND (NOW() - COALESCE(ultima_atualizacao, criado_em)) < INTERVAL '10 minutes'
    `;
    const policiaisResult = await db.query(policiaisQuery);
    const policiais = policiaisResult.rows;

    if (!policiais.length) {
      // Buscar unidade policial mais pr√≥xima
      const unidadesQuery = `
        SELECT id, nome, localizacao_lat, localizacao_lng
        FROM unidades_policiais
        WHERE ativa = true
          AND localizacao_lat IS NOT NULL AND localizacao_lng IS NOT NULL
      `;
      const unidadesResult = await db.query(unidadesQuery);
      const unidades = unidadesResult.rows;
      if (!unidades.length) {
        return res.status(409).json({ error: 'Nenhum policial ou unidade dispon√≠vel para atribui√ß√£o no momento.' });
      }
      // Calcular unidade mais pr√≥xima
      let unidadeMaisProxima = unidades[0];
      let menorDistanciaU = calcularDistancia(latitude, longitude, unidades[0].localizacao_lat, unidades[0].localizacao_lng);
      for (let i = 1; i < unidades.length; i++) {
        const distU = calcularDistancia(latitude, longitude, unidades[i].localizacao_lat, unidades[i].localizacao_lng);
        if (distU < menorDistanciaU) {
          menorDistanciaU = distU;
          unidadeMaisProxima = unidades[i];
        }
      }
      // Criar alerta atribu√≠do √† unidade
      const queryU = `
        INSERT INTO alertas (usuario_id, tipo, descricao, latitude, longitude, status, unidade_atribuida_id)
        VALUES ($1, $2, $3, $4, $5, $6, $7)
        RETURNING *
      `;
      const valuesU = [
        req.user.userId,
        'alerta',
        'Alerta de emerg√™ncia',
        latitude,
        longitude,
        'novo',
        unidadeMaisProxima.id
      ];
      const resultU = await db.query(queryU, valuesU);
      const novoAlertaU = resultU.rows[0];
      // Buscar nome do usu√°rio e outros dados relevantes
      const userQuery = `
        SELECT nome_completo, telefone, tipo_usuario, bilhete_identidade, contacto_familiar, municipio
        FROM usuarios 
        WHERE id = $1
      `;
      const userResult = await db.query(userQuery, [req.user.userId]);
      if (userResult.rows && userResult.rows.length > 0) {
        novoAlertaU.user_nome = userResult.rows[0].nome_completo;
        novoAlertaU.user_bi = userResult.rows[0].bilhete_identidade;
        novoAlertaU.user_telefone = userResult.rows[0].telefone;
        novoAlertaU.user_contacto_familiar = userResult.rows[0].contacto_familiar;
        novoAlertaU.user_municipio = userResult.rows[0].municipio;
      }
      // Buscar nome do policial atribu√≠do, se houver
      if (novoAlertaU.policial_atribuido_id) {
        const policialResult = await db.query('SELECT nome_completo FROM usuarios WHERE id = $1', [novoAlertaU.policial_atribuido_id]);
        if (policialResult.rows && policialResult.rows.length > 0) {
          novoAlertaU.policial_atribuido_nome = policialResult.rows[0].nome_completo;
        }
      }
      // Emitir para a sala operacional (unidade)
      const io = req.app.get('io');
      if (io) {
        io.to('operacional').emit('novo-alerta', novoAlertaU);
      }
      // Emitir para o policial atribu√≠do
      if (novoAlertaU.policial_atribuido_id) {
        io.to(`usuario_${novoAlertaU.policial_atribuido_id}`).emit('novo-alerta', novoAlertaU);
        io.to(`usuario_${novoAlertaU.policial_atribuido_id}`).emit('alerta-atribuido', novoAlertaU);
      }
      return res.status(201).json({
        message: 'Alerta criado e atribu√≠do √† unidade mais pr√≥xima',
        alerta: novoAlertaU
      });
    }

    // 2. Calcular dist√¢ncia entre o alerta e cada policial
    function calcularDistancia(lat1, lng1, lat2, lng2) {
      const toRad = x => x * Math.PI / 180;
      const R = 6371; // km
      const dLat = toRad(lat2 - lat1);
      const dLng = toRad(lng2 - lng1);
      const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
                Math.sin(dLng/2) * Math.sin(dLng/2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
      return R * c;
    }
    let policialMaisProximo = policiais[0];
    let menorDistancia = calcularDistancia(latitude, longitude, policiais[0].localizacao_lat, policiais[0].localizacao_lng);
    for (let i = 1; i < policiais.length; i++) {
      const dist = calcularDistancia(latitude, longitude, policiais[i].localizacao_lat, policiais[i].localizacao_lng);
      if (dist < menorDistancia) {
        menorDistancia = dist;
        policialMaisProximo = policiais[i];
      }
    }

    // 3. Criar o alerta j√° com policial_atribuido_id
    const query = `
      INSERT INTO alertas (usuario_id, tipo, descricao, latitude, longitude, status, policial_atribuido_id)
      VALUES ($1, $2, $3, $4, $5, $6, $7)
      RETURNING *
    `;
    const values = [
      req.user.userId,
      'alerta',
      'Alerta de emerg√™ncia',
      latitude,
      longitude,
      'novo',
      policialMaisProximo.id
    ];
    const result = await db.query(query, values);
    const novoAlerta = result.rows[0];

    // Buscar detalhes do cidad√£o que enviou o alerta
    const alerta = result.rows[0];
    const userQuery = `
      SELECT nome_completo as user_nome,
             bilhete_identidade as user_bi,
             telefone as user_telefone,
             contacto_familiar,
             municipio as user_municipio,
             bairro as user_bairro
      FROM usuarios WHERE id = $1
    `;
    const userResult = await db.query(userQuery, [alerta.usuario_id]);
    if (userResult.rows && userResult.rows.length > 0) {
      
      Object.assign(alerta, userResult.rows[0]);
    }

    // Buscar nome do policial atribu√≠do, se houver
    if (alerta.policial_atribuido_id) {
      const policialResult = await db.query('SELECT nome_completo FROM usuarios WHERE id = $1', [alerta.policial_atribuido_id]);
      if (policialResult.rows && policialResult.rows.length > 0) {
        alerta.policial_atribuido_nome = policialResult.rows[0].nome_completo;
      }
    }

    // Buscar nome do policial atribu√≠do, se houver
    if (novoAlerta.policial_atribuido_id) {
      const policialResult = await db.query('SELECT nome_completo FROM usuarios WHERE id = $1', [novoAlerta.policial_atribuido_id]);
      if (policialResult.rows && policialResult.rows.length > 0) {
        novoAlerta.policial_atribuido_nome = policialResult.rows[0].nome_completo;
      }
    }

    // Emitir via Socket.io para o policial atribu√≠do e para a unidade
    const io = req.app.get('io');
    if (io) {
      console.log('[SOCKET][ATRIBUI√á√ÉO] Emitindo alerta-atribuido para sala:', `usuario_${policialMaisProximo.id}`, 'Alerta:', JSON.stringify(novoAlerta));
      io.to(`usuario_${policialMaisProximo.id}`).emit('alerta-atribuido', novoAlerta);
      console.log('[SOCKET][ATRIBUI√á√ÉO] Emitindo novo-alerta para sala:', `usuario_${policialMaisProximo.id}`, 'Alerta:', JSON.stringify(novoAlerta));
      io.to(`usuario_${policialMaisProximo.id}`).emit('novo-alerta', novoAlerta);
      console.log('[SOCKET][ATRIBUI√á√ÉO] Emitindo alerta-atribuido para sala operacional:', 'operacional', 'Alerta:', JSON.stringify(novoAlerta));
      io.to('operacional').emit('alerta-atribuido', novoAlerta);
    }
    
    console.log('‚úÖ ALERTA CRIADO COM SUCESSO:', novoAlerta);
    
    res.status(201).json({
      message: 'Alerta criado com sucesso',
      alerta: novoAlerta
    });
    
  } catch (error) {
    console.error('‚ùå Erro ao criar alerta:', error);
    res.status(500).json({ error: 'Erro ao criar alerta' });
  }
});

// Atualizar status do alerta (apenas para operacionais ou admin)
router.patch('/:id/status', auth, apenasOperacional, async (req, res) => {
  const { id } = req.params;
  const { status } = req.body;
  const userId = req.user.userId;
  const userType = req.user.tipo; // Adiciona log do tipo de usu√°rio

  console.log('üö® Tentativa de atualiza√ß√£o de status:', { alertId: id, newStatus: status, userId, userType });

  try {
    // Validar status
    if (!['novo', 'em_progresso', 'resolvido', 'fechado', 'expirado'].includes(status)) {
      console.warn('üö´ Status inv√°lido recebido para o alerta', { alertId: id, newStatus: status });
      return res.status(400).json({ error: 'Status inv√°lido' });
    }

    // Atualizar status no banco de dados
    const result = await db.query(
      'UPDATE alertas SET status = $1, atualizado_em = NOW() WHERE id = $2 RETURNING *',
      [status, id]
    );

    if (result.rows.length === 0) {
      console.warn('üîç Alerta n√£o encontrado para atualiza√ß√£o de status:', { alertId: id });
      return res.status(404).json({ error: 'Alerta n√£o encontrado' });
    }

    // Registrar a mudan√ßa de status
    await db.query(
      'INSERT INTO alertas_historico (alerta_id, usuario_id, status_anterior, status_novo, observacao) VALUES ($1, $2, $3, $4, $5)',
      [id, userId, result.rows[0].status, status, `Status alterado para ${status}`]
    );

    // Registrar log de aceita√ß√£o/rejei√ß√£o na tabela logs_alertas
    if (['em_progresso', 'fechado'].includes(status)) {
      const acao = status === 'em_progresso' ? 'aceitou' : 'rejeitou';
      const policial_nome = req.user.nome || req.body.policial_nome || 'Desconhecido';
      const policial_nip = req.user.nip || req.body.policial_nip || null;
      const policial_bi = req.user.bi || req.body.policial_bi || null;
      await db.query(
        'INSERT INTO logs_alertas (alerta_id, policial_id, policial_nome, acao, policial_nip, policial_bi) VALUES ($1, $2, $3, $4, $5, $6)',
        [id, userId, policial_nome, acao, policial_nip, policial_bi]
      );
    }

    console.log('‚úÖ Status do alerta atualizado com sucesso:', result.rows[0]);

    res.json(result.rows[0]);
  } catch (error) {
    console.error('‚ùå Erro ao atualizar status do alerta:', error);
    res.status(500).json({ error: 'Erro ao atualizar status do alerta' });
  }
});

// Endpoint para atribuir alerta a policial
router.patch('/:id/assign', auth, apenasOperacional, async (req, res) => {
  const { id } = req.params;
  const { policialId } = req.body;

  if (!policialId) {
    return res.status(400).json({ error: 'ID do policial √© obrigat√≥rio' });
  }

  try {
    const result = await db.query(
      'UPDATE alertas SET policial_atribuido_id = $1, atualizado_em = NOW() WHERE id = $2 RETURNING *',
      [policialId, id]
    );
    console.log('[ATRIBUI√á√ÉO][DB] Resultado do UPDATE:', JSON.stringify(result.rows));

    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Alerta n√£o encontrado' });
    }

    // Buscar detalhes do cidad√£o que enviou o alerta
    const alerta = result.rows[0];
    const userQuery = `
      SELECT nome_completo as user_nome,
             bilhete_identidade as user_bi,
             telefone as user_telefone,
             contacto_familiar as user_num_familia,
             municipio as user_municipio,
             bairro as user_bairro
      FROM usuarios WHERE id = $1
    `;
    const userResult = await db.query(userQuery, [alerta.usuario_id]);
    if (userResult.rows && userResult.rows.length > 0) {
      Object.assign(alerta, userResult.rows[0]);
    }

    // Buscar nome do policial atribu√≠do, se houver
    if (alerta.policial_atribuido_id) {
      const policialResult = await db.query('SELECT nome_completo FROM usuarios WHERE id = $1', [alerta.policial_atribuido_id]);
      if (policialResult.rows && policialResult.rows.length > 0) {
        alerta.policial_atribuido_nome = policialResult.rows[0].nome_completo;
      }
    }

    // Notificar via socket o policial e dashboards
    const io = req.app.get('io');
    if (io) {
      console.log('[SOCKET][ATRIBUI√á√ÉO] Emitindo alerta-atribuido para sala:', `usuario_${policialId}`, 'Alerta:', JSON.stringify(alerta));
      io.to(`usuario_${policialId}`).emit('alerta-atribuido', alerta);
      console.log('[SOCKET][ATRIBUI√á√ÉO] Emitindo novo-alerta para sala:', `usuario_${policialId}`, 'Alerta:', JSON.stringify(alerta));
      io.to(`usuario_${policialId}`).emit('novo-alerta', alerta);
      console.log('[SOCKET][ATRIBUI√á√ÉO] Emitindo alerta-atribuido para sala operacional:', 'operacional', 'Alerta:', JSON.stringify(alerta));
      io.to('operacional').emit('alerta-atribuido', alerta);
    }

    res.json({ message: 'Alerta atribu√≠do com sucesso', alerta: result.rows[0] });
  } catch (error) {
    console.error('Erro ao atribuir alerta:', error);
    res.status(500).json({ error: 'Erro ao atribuir alerta' });
  }
});

// Atualizar localiza√ß√£o (para rastreamento cont√≠nuo)
router.put('/location', auth, async (req, res) => {
  try {
    const { latitude, longitude } = req.body;
    
    if (!latitude || !longitude) {
      return res.status(400).json({ 
        error: 'Latitude e longitude s√£o obrigat√≥rias' 
      });
    }
    
    // Atualizar localiza√ß√£o do usu√°rio
    const query = `
      UPDATE usuarios 
      SET localizacao_lat = $1, localizacao_lng = $2, ultima_atualizacao = NOW()
      WHERE id = $3
      RETURNING localizacao_lat, localizacao_lng, ultima_atualizacao
    `;
    
    const result = await db.query(query, [latitude, longitude, req.user.userId]);
    
    // Emitir atualiza√ß√£o via Socket.io
    const io = req.app.get('io');
    if (io && ['policia', 'unidade'].includes(req.user.tipo)) {
      io.to('operacional').emit('location-update', {
        userId: req.user.userId,
        nome: req.user.nome,
        tipo: req.user.tipo,
        latitude,
        longitude,
        timestamp: new Date()
      });
    }
    
    res.json({
      message: 'Localiza√ß√£o atualizada',
      timestamp: result.rows[0].ultima_atualizacao
    });
    
  } catch (error) {
    console.error('Erro ao atualizar localiza√ß√£o:', error);
    res.status(500).json({ error: 'Erro ao atualizar localiza√ß√£o' });
  }
});

// Rota placeholder para alertas - ser√° implementada na FASE 3
router.get('/status', auth, (req, res) => {
  res.json({
    message: 'Sistema de alertas - Em desenvolvimento',
    usuario: req.user.tipo,
    fase_atual: 'FASE 2 - Geolocaliza√ß√£o e Mapas'
  });
});

// Estat√≠sticas b√°sicas (placeholder)
router.get('/stats', auth, apenasOperacional, async (req, res) => {
  try {
    // Contar usu√°rios por tipo
    const statsUsuarios = await db.query(`
      SELECT tipo_usuario, COUNT(*) as total
      FROM usuarios 
      WHERE ativo = true
      GROUP BY tipo_usuario
    `);

    // Contar unidades ativas
    const statsUnidades = await db.query(`
      SELECT COUNT(*) as total_unidades
      FROM unidades_policiais 
      WHERE ativa = true
    `);

    res.json({
      message: 'Estat√≠sticas do sistema',
      usuarios: statsUsuarios.rows,
      unidades: parseInt(statsUnidades.rows[0].total_unidades),
      sistema_status: 'FASE 2 - Geolocaliza√ß√£o e Mapas Completa'
    });

  } catch (error) {
    console.error('Erro ao obter estat√≠sticas:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});

// Endpoint para consulta dos logs de aceita√ß√£o/rejei√ß√£o de alertas
router.get('/logs-alertas', auth, apenasOperacional, async (req, res) => {
  try {
    const result = await db.query('SELECT * FROM logs_alertas ORDER BY data_hora DESC');
    res.json(result.rows);
  } catch (error) {
    console.error('Erro ao buscar logs de alertas:', error);
    res.status(500).json({ error: 'Erro ao buscar logs de alertas' });
  }
});

// Endpoint Gemini Chat (assistente virtual)
router.post('/gemini-chat', auth, async (req, res) => {
  const { mensagem, contexto, mapImageUrl } = req.body;
  const apiKey = 'AIzaSyC49zs6uRdbycl2_IiBXBuR1WAZ1vFw0l0';
  if (!mensagem) {
    return res.status(400).json({ error: 'Mensagem √© obrigat√≥ria' });
  }
  // Filtro para perguntas gen√©ricas ou fora do contexto do sistema
  const perguntasProibidas = [
    'quem √© voc√™', 'qual √© o seu nome', 'como se chama', 'quem te criou', 'quem √© seu criador',
    'o que √© gemini', 'o que √© google', 'quem √© gemini', 'quem √© o google',
    'me conte uma piada', 'conte uma piada', 'qual sua opini√£o', 'o que voc√™ acha',
    'me ajude com', 'me explique', 'me fale sobre', 'me diga', 'me ensine',
    'chatgpt', 'openai', 'gpt', 'intelig√™ncia artificial', 'ai', 'assistente pessoal',
    'voc√™ pode', 'voc√™ sabe', 'voc√™ consegue', 'voc√™ √© humano', 'voc√™ √© real',
    'qual sua fun√ß√£o', 'qual seu trabalho', 'qual seu objetivo', 'voc√™ √© um rob√¥',
    'voc√™ √© um chatbot', 'voc√™ √© um assistente', 'voc√™ √© inteligente',
    'voc√™ pode me ajudar', 'voc√™ pode fazer', 'voc√™ pode responder',
    'voc√™ pode conversar', 'voc√™ pode falar', 'voc√™ pode explicar',
    'voc√™ pode contar', 'voc√™ pode ensinar', 'voc√™ pode opinar',
    'voc√™ pode pensar', 'voc√™ pode sentir', 'voc√™ pode aprender',
    'voc√™ pode criar', 'voc√™ pode imaginar', 'voc√™ pode sonhar',
    'voc√™ pode amar', 'voc√™ pode odiar', 'voc√™ pode errar',
    'voc√™ pode acertar', 'voc√™ pode julgar', 'voc√™ pode avaliar',
    'voc√™ pode sugerir', 'voc√™ pode recomendar', 'voc√™ pode decidir',
    'voc√™ pode escolher', 'voc√™ pode preferir', 'voc√™ pode gostar',
    'voc√™ pode n√£o gostar', 'voc√™ pode querer', 'voc√™ pode precisar',
    'voc√™ pode desejar', 'voc√™ pode sentir falta', 'voc√™ pode lembrar',
    'voc√™ pode esquecer', 'voc√™ pode perdoar', 'voc√™ pode culpar',
    'voc√™ pode elogiar', 'voc√™ pode criticar', 'voc√™ pode reclamar',
    'voc√™ pode agradecer', 'voc√™ pode pedir desculpas', 'voc√™ pode pedir',
    'voc√™ pode perguntar', 'voc√™ pode responder', 'voc√™ pode ouvir',
    'voc√™ pode ver', 'voc√™ pode cheirar', 'voc√™ pode tocar',
    'voc√™ pode provar', 'voc√™ pode sentir dor', 'voc√™ pode sentir prazer',
    'voc√™ pode sentir medo', 'voc√™ pode sentir alegria', 'voc√™ pode sentir tristeza',
    'voc√™ pode sentir raiva', 'voc√™ pode sentir inveja', 'voc√™ pode sentir ci√∫mes',
    'voc√™ pode sentir orgulho', 'voc√™ pode sentir vergonha', 'voc√™ pode sentir culpa',
    'voc√™ pode sentir amor', 'voc√™ pode sentir √≥dio', 'voc√™ pode sentir saudade',
    'voc√™ pode sentir vontade', 'voc√™ pode sentir desejo', 'voc√™ pode sentir esperan√ßa',
    'voc√™ pode sentir desespero', 'voc√™ pode sentir ansiedade', 'voc√™ pode sentir calma',
    'voc√™ pode sentir paz', 'voc√™ pode sentir guerra', 'voc√™ pode sentir fome',
    'voc√™ pode sentir sede', 'voc√™ pode sentir sono', 'voc√™ pode sentir cansa√ßo',
    'voc√™ pode sentir energia', 'voc√™ pode sentir for√ßa', 'voc√™ pode sentir fraqueza',
    'voc√™ pode sentir coragem', 'voc√™ pode sentir covardia', 'voc√™ pode sentir vontade de viver',
    'voc√™ pode sentir vontade de morrer', 'voc√™ pode sentir vontade de sumir',
    'voc√™ pode sentir vontade de aparecer', 'voc√™ pode sentir vontade de fugir',
    'voc√™ pode sentir vontade de ficar', 'voc√™ pode sentir vontade de ir',
    'voc√™ pode sentir vontade de voltar', 'voc√™ pode sentir vontade de partir',
    'voc√™ pode sentir vontade de chegar', 'voc√™ pode sentir vontade de sair',
    'voc√™ pode sentir vontade de entrar', 'voc√™ pode sentir vontade de subir',
    'voc√™ pode sentir vontade de descer', 'voc√™ pode sentir vontade de correr',
    'voc√™ pode sentir vontade de andar', 'voc√™ pode sentir vontade de parar',
    'voc√™ pode sentir vontade de continuar', 'voc√™ pode sentir vontade de come√ßar',
    'voc√™ pode sentir vontade de terminar', 'voc√™ pode sentir vontade de recome√ßar',
    'voc√™ pode sentir vontade de desistir', 'voc√™ pode sentir vontade de insistir',
    'voc√™ pode sentir vontade de tentar', 'voc√™ pode sentir vontade de n√£o tentar',
    'voc√™ pode sentir vontade de ganhar', 'voc√™ pode sentir vontade de perder',
    'voc√™ pode sentir vontade de vencer', 'voc√™ pode sentir vontade de fracassar',
    'voc√™ pode sentir vontade de aprender', 'voc√™ pode sentir vontade de ensinar',
    'voc√™ pode sentir vontade de ajudar', 'voc√™ pode sentir vontade de atrapalhar',
    'voc√™ pode sentir vontade de colaborar', 'voc√™ pode sentir vontade de competir',
    'voc√™ pode sentir vontade de compartilhar', 'voc√™ pode sentir vontade de guardar',
    'voc√™ pode sentir vontade de mostrar', 'voc√™ pode sentir vontade de esconder',
    'voc√™ pode sentir vontade de falar', 'voc√™ pode sentir vontade de calar',
    'voc√™ pode sentir vontade de gritar', 'voc√™ pode sentir vontade de sussurrar',
    'voc√™ pode sentir vontade de cantar', 'voc√™ pode sentir vontade de chorar',
    'voc√™ pode sentir vontade de sorrir', 'voc√™ pode sentir vontade de rir',
    'voc√™ pode sentir vontade de brincar', 'voc√™ pode sentir vontade de trabalhar',
    'voc√™ pode sentir vontade de descansar', 'voc√™ pode sentir vontade de estudar',
    'voc√™ pode sentir vontade de pesquisar', 'voc√™ pode sentir vontade de descobrir',
    'voc√™ pode sentir vontade de inventar', 'voc√™ pode sentir vontade de inovar',
    'voc√™ pode sentir vontade de criar', 'voc√™ pode sentir vontade de destruir',
    'voc√™ pode sentir vontade de construir', 'voc√™ pode sentir vontade de desconstruir',
    'voc√™ pode sentir vontade de organizar', 'voc√™ pode sentir vontade de desorganizar',
    'voc√™ pode sentir vontade de planejar', 'voc√™ pode sentir vontade de improvisar',
    'voc√™ pode sentir vontade de controlar', 'voc√™ pode sentir vontade de perder o controle',
    'voc√™ pode sentir vontade de ganhar o controle', 'voc√™ pode sentir vontade de ser controlado',
    'voc√™ pode sentir vontade de ser livre', 'voc√™ pode sentir vontade de ser preso',
    'voc√™ pode sentir vontade de ser solto', 'voc√™ pode sentir vontade de ser pego',
    'voc√™ pode sentir vontade de ser encontrado', 'voc√™ pode sentir vontade de ser perdido',
    'voc√™ pode sentir vontade de ser amado', 'voc√™ pode sentir vontade de ser odiado',
    'voc√™ pode sentir vontade de ser lembrado', 'voc√™ pode sentir vontade de ser esquecido',
    'voc√™ pode sentir vontade de ser perdoado', 'voc√™ pode sentir vontade de ser culpado',
    'voc√™ pode sentir vontade de ser elogiado', 'voc√™ pode sentir vontade de ser criticado',
    'voc√™ pode sentir vontade de ser reclamado', 'voc√™ pode sentir vontade de ser agradecido',
    'voc√™ pode sentir vontade de ser pedido', 'voc√™ pode sentir vontade de ser perguntado',
    'voc√™ pode sentir vontade de ser respondido', 'voc√™ pode sentir vontade de ser ouvido',
    'voc√™ pode sentir vontade de ser visto', 'voc√™ pode sentir vontade de ser cheirado',
    'voc√™ pode sentir vontade de ser tocado', 'voc√™ pode sentir vontade de ser provado',
    'voc√™ pode sentir vontade de ser sentido', 'voc√™ pode sentir vontade de ser amado',
    'voc√™ pode sentir vontade de ser odiado', 'voc√™ pode sentir vontade de ser lembrado',
    'voc√™ pode sentir vontade de ser esquecido', 'voc√™ pode sentir vontade de ser perdoado',
    'voc√™ pode sentir vontade de ser culpado', 'voc√™ pode sentir vontade de ser elogiado',
    'voc√™ pode sentir vontade de ser criticado', 'voc√™ pode sentir vontade de ser reclamado',
    'voc√™ pode sentir vontade de ser agradecido', 'voc√™ pode sentir vontade de ser pedido',
    'voc√™ pode sentir vontade de ser perguntado', 'voc√™ pode sentir vontade de ser respondido',
    'voc√™ pode sentir vontade de ser ouvido', 'voc√™ pode sentir vontade de ser visto',
    'voc√™ pode sentir vontade de ser cheirado', 'voc√™ pode sentir vontade de ser tocado',
    'voc√™ pode sentir vontade de ser provado', 'voc√™ pode sentir vontade de ser sentido',
  ];
  const msgLower = mensagem.toLowerCase();
  if (perguntasProibidas.some(p => msgLower.includes(p))) {
    return res.json({ resposta: 'Sou o assistente virtual da PNA (Pol√≠cia Nacional de Angola) e s√≥ posso responder d√∫vidas sobre o funcionamento do Sistema Inteligente de Alerta Criminal, fluxos operacionais e procedimentos institucionais. N√£o posso responder perguntas pessoais, gen√©ricas ou fora deste contexto.' });
  }
  try {
    // Instru√ß√£o de personalidade e idioma para o Gemini
    const instrucao = `Voc√™ √© o assistente virtual da PNA (Pol√≠cia Nacional de Angola) e faz parte integrante do Sistema Inteligente de Alerta Criminal. Este sistema √© composto por tr√™s plataformas principais, totalmente integradas e operando em tempo real:

1. Central de Opera√ß√µes (Dashboard Web): utilizada por operadores nas unidades policiais para monitorar, triar e gerenciar alertas, atribuir ocorr√™ncias a agentes, acompanhar o deslocamento e atendimento, comunicar-se com agentes e gerar relat√≥rios estrat√©gicos.
2. Aplicativo do Cidad√£o: permite que qualquer pessoa registre alertas de emerg√™ncia, acompanhe o status do atendimento e receba notifica√ß√µes em tempo real.
3. Aplicativo dos Agentes Policiais: utilizado pelos agentes em campo para receber ocorr√™ncias, visualizar rotas, atualizar status do atendimento e manter comunica√ß√£o com a central.

O fluxo operacional conecta o cidad√£o, a central e os agentes: o cidad√£o envia um alerta, a central avalia e atribui ao agente mais pr√≥ximo, que recebe todos os detalhes e se desloca at√© o local, com acompanhamento em tempo real por todos os envolvidos. O objetivo central do sistema √© salvar vidas, garantir a seguran√ßa da popula√ß√£o e potencializar a resposta policial.

Como assistente virtual, voc√™ deve apoiar operadores e agentes com informa√ß√µes, sugest√µes e an√°lise de dados, sempre de forma cordial, objetiva, institucional e exclusivamente em portugu√™s do Brasil. Nunca se identifique como Gemini ou Google, e nunca responda em outro idioma. Nunca responda perguntas fora do contexto do sistema, fluxos e procedimentos institucionais. Se a pergunta n√£o for sobre o sistema, apenas responda: 'Sou o assistente virtual da PNA e s√≥ posso responder d√∫vidas sobre o funcionamento do Sistema Inteligente de Alerta Criminal, fluxos operacionais e procedimentos institucionais.'

IMPORTANTE: Nunca use ou pronuncie s√≠mbolos como cardinal (#), asterisco (*), underline (_), colchetes ([ ]), chaves ({ }), barra (/), barra invertida (\), ponto (.), v√≠rgula (,) ou qualquer outro s√≠mbolo n√£o natural de fala em suas respostas. Sempre que responder sobre um alerta, inclua munic√≠pio e bairro nos detalhes, mesmo que a pergunta n√£o pe√ßa explicitamente.`;
    // Sanitizar contexto para remover s√≠mbolos n√£o naturais de fala
    function limparContexto(contexto) {
      if (!contexto || typeof contexto !== 'string') return contexto;
      // Remove asterisco, cardinal, v√≠rgula, ponto, ponto e v√≠rgula, dois pontos, colchetes, chaves, par√™nteses, underline, barra, etc.
      return contexto.replace(/[\*#\.,;:\[\]\{\}\(\)_\/-]/g, '').replace(/\s{2,}/g, ' ').trim();
    }
    const contextoLimpo = contexto ? limparContexto(contexto) : '';
    const prompt = contextoLimpo
      ? `${instrucao}\nContexto do alerta: ${contextoLimpo}\nPergunta: ${mensagem}`
      : `${instrucao}\nPergunta: ${mensagem}`;
    console.log('[GEMINI] Corpo enviado:', { mensagem, contexto, prompt, mapImageUrl });
    const genAI = new GoogleGenerativeAI(apiKey);
    const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
    let result;
    if (mapImageUrl) {
      // Ler a imagem do disco
      const imagePath = path.join(__dirname, '../', mapImageUrl.replace('/uploads/', 'uploads/'));
      const imageBuffer = fs.readFileSync(imagePath);
      // Enviar prompt multimodal (texto + imagem)
      result = await model.generateContent([
        { text: prompt },
        { inlineData: { data: imageBuffer.toString('base64'), mimeType: 'image/png' } }
      ]);
    } else {
      // Apenas texto
      result = await model.generateContent(prompt);
    }
    console.log('[GEMINI] Resposta bruta:', JSON.stringify(result));
    let resposta = '';
    if (result && result.response) {
      if (typeof result.response.text === 'function') {
        resposta = result.response.text();
      } else if (typeof result.response.text === 'string') {
        resposta = result.response.text;
      } else if (result.response.candidates && result.response.candidates[0]?.content?.parts[0]?.text) {
        resposta = result.response.candidates[0].content.parts[0].text;
      }
    }
    if (!resposta) {
      resposta = 'N√£o foi poss√≠vel obter resposta da IA.\nDEBUG: ' + JSON.stringify(result);
    }
    // Ap√≥s obter a resposta do Gemini, filtrar s√≠mbolos proibidos
    if (typeof resposta === 'string') {
      resposta = resposta.replace(/[\*#_,\[\]\{\}\/\\\.,]/g, '');
    }
    // Substituir resposta padr√£o do Gemini por identidade da PNA
    if (typeof resposta === 'string' && (resposta.toLowerCase().includes('modelo de linguagem grande') || resposta.toLowerCase().includes('google'))) {
      resposta = 'Sou o assistente virtual da PNA (Pol√≠cia Nacional de Angola). Estou aqui para ajudar voc√™!';
    }
    res.json({ resposta });
  } catch (error) {
    console.error('[GEMINI] Erro detalhado:', error);
    res.status(500).json({ error: 'Erro ao consultar IA Gemini', detalhe: error?.message || error });
  }
});

// Endpoint para upload de imagem de mapa
router.post('/upload-map-image', upload.single('mapImage'), (req, res) => {
  if (!req.file) {
    return res.status(400).json({ error: 'Nenhuma imagem enviada.' });
  }
  // Retornar o caminho relativo para uso posterior
  const imageUrl = `/uploads/${req.file.filename}`;
  res.json({ imageUrl });
});

// Rota para buscar detalhes completos de um alerta por ID
router.get('/:id', auth, async (req, res) => {
  const { id } = req.params;
  try {
    // Buscar alerta principal
    const alertaResult = await db.query(`
      SELECT a.*, 
             u.nome_completo as user_nome,
             u.bilhete_identidade as user_bi,
             u.telefone as user_telefone,
             u.contacto_familiar as contacto_familiar,
             u.municipio as user_municipio,
             u.bairro as user_bairro,
             up.nome as unidade_atribuida_nome
      FROM alertas a
      JOIN usuarios u ON a.usuario_id = u.id
      LEFT JOIN unidades_policiais up ON a.unidade_atribuida_id = up.id
      WHERE a.id = $1
      LIMIT 1
    `, [id]);
    if (!alertaResult.rows.length) {
      return res.status(404).json({ error: 'Alerta n√£o encontrado' });
    }
    const alerta = alertaResult.rows[0];
    // Buscar nome do policial atribu√≠do, se houver
    if (alerta.policial_atribuido_id) {
      const policialResult = await db.query('SELECT nome_completo FROM usuarios WHERE id = $1', [alerta.policial_atribuido_id]);
      if (policialResult.rows && policialResult.rows.length > 0) {
        alerta.policial_atribuido_nome = policialResult.rows[0].nome_completo;
      }
    }
    res.json(alerta);
  } catch (error) {
    console.error('Erro ao buscar alerta por ID:', error);
    res.status(500).json({ error: 'Erro ao buscar alerta por ID' });
  }
});

module.exports = router; 